// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/grpc/proto/hackernews_grpc.pb.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockAPIClient) ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_ListAllClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAll", varargs...)
	ret0, _ := ret[0].(API_ListAllClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockAPIClientMockRecorder) ListAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAPIClient)(nil).ListAll), varargs...)
}

// ListJobs mocks base method.
func (m *MockAPIClient) ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_ListJobsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(API_ListJobsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockAPIClientMockRecorder) ListJobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockAPIClient)(nil).ListJobs), varargs...)
}

// ListStories mocks base method.
func (m *MockAPIClient) ListStories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_ListStoriesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStories", varargs...)
	ret0, _ := ret[0].(API_ListStoriesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStories indicates an expected call of ListStories.
func (mr *MockAPIClientMockRecorder) ListStories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStories", reflect.TypeOf((*MockAPIClient)(nil).ListStories), varargs...)
}

// MockAPI_ListAllClient is a mock of API_ListAllClient interface.
type MockAPI_ListAllClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListAllClientMockRecorder
}

// MockAPI_ListAllClientMockRecorder is the mock recorder for MockAPI_ListAllClient.
type MockAPI_ListAllClientMockRecorder struct {
	mock *MockAPI_ListAllClient
}

// NewMockAPI_ListAllClient creates a new mock instance.
func NewMockAPI_ListAllClient(ctrl *gomock.Controller) *MockAPI_ListAllClient {
	mock := &MockAPI_ListAllClient{ctrl: ctrl}
	mock.recorder = &MockAPI_ListAllClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListAllClient) EXPECT() *MockAPI_ListAllClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAPI_ListAllClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAPI_ListAllClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAPI_ListAllClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAPI_ListAllClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListAllClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListAllClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAPI_ListAllClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAPI_ListAllClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAPI_ListAllClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAPI_ListAllClient) Recv() (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAPI_ListAllClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAPI_ListAllClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListAllClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListAllClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListAllClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListAllClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListAllClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListAllClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAPI_ListAllClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAPI_ListAllClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAPI_ListAllClient)(nil).Trailer))
}

// MockAPI_ListJobsClient is a mock of API_ListJobsClient interface.
type MockAPI_ListJobsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListJobsClientMockRecorder
}

// MockAPI_ListJobsClientMockRecorder is the mock recorder for MockAPI_ListJobsClient.
type MockAPI_ListJobsClientMockRecorder struct {
	mock *MockAPI_ListJobsClient
}

// NewMockAPI_ListJobsClient creates a new mock instance.
func NewMockAPI_ListJobsClient(ctrl *gomock.Controller) *MockAPI_ListJobsClient {
	mock := &MockAPI_ListJobsClient{ctrl: ctrl}
	mock.recorder = &MockAPI_ListJobsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListJobsClient) EXPECT() *MockAPI_ListJobsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAPI_ListJobsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAPI_ListJobsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAPI_ListJobsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListJobsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAPI_ListJobsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAPI_ListJobsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAPI_ListJobsClient) Recv() (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAPI_ListJobsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListJobsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListJobsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListJobsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListJobsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAPI_ListJobsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAPI_ListJobsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAPI_ListJobsClient)(nil).Trailer))
}

// MockAPI_ListStoriesClient is a mock of API_ListStoriesClient interface.
type MockAPI_ListStoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListStoriesClientMockRecorder
}

// MockAPI_ListStoriesClientMockRecorder is the mock recorder for MockAPI_ListStoriesClient.
type MockAPI_ListStoriesClientMockRecorder struct {
	mock *MockAPI_ListStoriesClient
}

// NewMockAPI_ListStoriesClient creates a new mock instance.
func NewMockAPI_ListStoriesClient(ctrl *gomock.Controller) *MockAPI_ListStoriesClient {
	mock := &MockAPI_ListStoriesClient{ctrl: ctrl}
	mock.recorder = &MockAPI_ListStoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListStoriesClient) EXPECT() *MockAPI_ListStoriesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAPI_ListStoriesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAPI_ListStoriesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAPI_ListStoriesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListStoriesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAPI_ListStoriesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAPI_ListStoriesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAPI_ListStoriesClient) Recv() (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAPI_ListStoriesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListStoriesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListStoriesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListStoriesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListStoriesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockAPI_ListStoriesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAPI_ListStoriesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAPI_ListStoriesClient)(nil).Trailer))
}

// MockAPIServer is a mock of APIServer interface.
type MockAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServerMockRecorder
}

// MockAPIServerMockRecorder is the mock recorder for MockAPIServer.
type MockAPIServerMockRecorder struct {
	mock *MockAPIServer
}

// NewMockAPIServer creates a new mock instance.
func NewMockAPIServer(ctrl *gomock.Controller) *MockAPIServer {
	mock := &MockAPIServer{ctrl: ctrl}
	mock.recorder = &MockAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIServer) EXPECT() *MockAPIServerMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockAPIServer) ListAll(arg0 *emptypb.Empty, arg1 API_ListAllServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAll indicates an expected call of ListAll.
func (mr *MockAPIServerMockRecorder) ListAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAPIServer)(nil).ListAll), arg0, arg1)
}

// ListJobs mocks base method.
func (m *MockAPIServer) ListJobs(arg0 *emptypb.Empty, arg1 API_ListJobsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockAPIServerMockRecorder) ListJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockAPIServer)(nil).ListJobs), arg0, arg1)
}

// ListStories mocks base method.
func (m *MockAPIServer) ListStories(arg0 *emptypb.Empty, arg1 API_ListStoriesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStories indicates an expected call of ListStories.
func (mr *MockAPIServerMockRecorder) ListStories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStories", reflect.TypeOf((*MockAPIServer)(nil).ListStories), arg0, arg1)
}

// mustEmbedUnimplementedAPIServer mocks base method.
func (m *MockAPIServer) mustEmbedUnimplementedAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAPIServer")
}

// mustEmbedUnimplementedAPIServer indicates an expected call of mustEmbedUnimplementedAPIServer.
func (mr *MockAPIServerMockRecorder) mustEmbedUnimplementedAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAPIServer", reflect.TypeOf((*MockAPIServer)(nil).mustEmbedUnimplementedAPIServer))
}

// MockUnsafeAPIServer is a mock of UnsafeAPIServer interface.
type MockUnsafeAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAPIServerMockRecorder
}

// MockUnsafeAPIServerMockRecorder is the mock recorder for MockUnsafeAPIServer.
type MockUnsafeAPIServerMockRecorder struct {
	mock *MockUnsafeAPIServer
}

// NewMockUnsafeAPIServer creates a new mock instance.
func NewMockUnsafeAPIServer(ctrl *gomock.Controller) *MockUnsafeAPIServer {
	mock := &MockUnsafeAPIServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAPIServer) EXPECT() *MockUnsafeAPIServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAPIServer mocks base method.
func (m *MockUnsafeAPIServer) mustEmbedUnimplementedAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAPIServer")
}

// mustEmbedUnimplementedAPIServer indicates an expected call of mustEmbedUnimplementedAPIServer.
func (mr *MockUnsafeAPIServerMockRecorder) mustEmbedUnimplementedAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAPIServer", reflect.TypeOf((*MockUnsafeAPIServer)(nil).mustEmbedUnimplementedAPIServer))
}

// MockAPI_ListAllServer is a mock of API_ListAllServer interface.
type MockAPI_ListAllServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListAllServerMockRecorder
}

// MockAPI_ListAllServerMockRecorder is the mock recorder for MockAPI_ListAllServer.
type MockAPI_ListAllServerMockRecorder struct {
	mock *MockAPI_ListAllServer
}

// NewMockAPI_ListAllServer creates a new mock instance.
func NewMockAPI_ListAllServer(ctrl *gomock.Controller) *MockAPI_ListAllServer {
	mock := &MockAPI_ListAllServer{ctrl: ctrl}
	mock.recorder = &MockAPI_ListAllServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListAllServer) EXPECT() *MockAPI_ListAllServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAPI_ListAllServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListAllServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListAllServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListAllServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListAllServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListAllServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAPI_ListAllServer) Send(arg0 *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAPI_ListAllServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAPI_ListAllServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAPI_ListAllServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAPI_ListAllServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAPI_ListAllServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListAllServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListAllServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListAllServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAPI_ListAllServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAPI_ListAllServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAPI_ListAllServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAPI_ListAllServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAPI_ListAllServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAPI_ListAllServer)(nil).SetTrailer), arg0)
}

// MockAPI_ListJobsServer is a mock of API_ListJobsServer interface.
type MockAPI_ListJobsServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListJobsServerMockRecorder
}

// MockAPI_ListJobsServerMockRecorder is the mock recorder for MockAPI_ListJobsServer.
type MockAPI_ListJobsServerMockRecorder struct {
	mock *MockAPI_ListJobsServer
}

// NewMockAPI_ListJobsServer creates a new mock instance.
func NewMockAPI_ListJobsServer(ctrl *gomock.Controller) *MockAPI_ListJobsServer {
	mock := &MockAPI_ListJobsServer{ctrl: ctrl}
	mock.recorder = &MockAPI_ListJobsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListJobsServer) EXPECT() *MockAPI_ListJobsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAPI_ListJobsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListJobsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListJobsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListJobsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAPI_ListJobsServer) Send(arg0 *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAPI_ListJobsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAPI_ListJobsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAPI_ListJobsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListJobsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListJobsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAPI_ListJobsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAPI_ListJobsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAPI_ListJobsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAPI_ListJobsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAPI_ListJobsServer)(nil).SetTrailer), arg0)
}

// MockAPI_ListStoriesServer is a mock of API_ListStoriesServer interface.
type MockAPI_ListStoriesServer struct {
	ctrl     *gomock.Controller
	recorder *MockAPI_ListStoriesServerMockRecorder
}

// MockAPI_ListStoriesServerMockRecorder is the mock recorder for MockAPI_ListStoriesServer.
type MockAPI_ListStoriesServerMockRecorder struct {
	mock *MockAPI_ListStoriesServer
}

// NewMockAPI_ListStoriesServer creates a new mock instance.
func NewMockAPI_ListStoriesServer(ctrl *gomock.Controller) *MockAPI_ListStoriesServer {
	mock := &MockAPI_ListStoriesServer{ctrl: ctrl}
	mock.recorder = &MockAPI_ListStoriesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI_ListStoriesServer) EXPECT() *MockAPI_ListStoriesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockAPI_ListStoriesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAPI_ListStoriesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAPI_ListStoriesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAPI_ListStoriesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAPI_ListStoriesServer) Send(arg0 *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAPI_ListStoriesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAPI_ListStoriesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAPI_ListStoriesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAPI_ListStoriesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAPI_ListStoriesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAPI_ListStoriesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAPI_ListStoriesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAPI_ListStoriesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAPI_ListStoriesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAPI_ListStoriesServer)(nil).SetTrailer), arg0)
}
